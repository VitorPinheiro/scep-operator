REGISTER STREAM Ssequence AS
PREFIX ex: <http://example.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <https://www.w3.org/2002/07/owl#>
PREFIX onto: <file:///Users/vitor/git-repository/KAFKA/scep-operator/examples/>
PREFIX onyx: <http://www.gsi.dit.upm.es/ontologies/onyx/ns#>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX dbc: <http://dbpedia.org/page/Category:>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX sioc: <http://rdfs.org/sioc/ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX sioc_t: <http://rdfs.org/sioc/types#>
PREFIX schema: <http://schema.org/>
PREFIX nee: <http://www.ics.forth.gr/isl/oae/core#>
PREFIX wna: <http://www.gsi.dit.upm.es/ontologies/wnaffect/ns#>
CONSTRUCT 
{     
    ?artist1 ex:hasNegativeTweet ex:true .
    ?artist1 ex:position "1"^^xsd:integer .
    ?artist2 ex:hasMinOfTwoEntities ex:true .
    ?artist2 ex:position "2"^^xsd:integer .
    ?artist3 ex:hasPositiveTweet ex:true .
    ?artist3 ex:position "3"^^xsd:integer .
}
FROM STREAM <http://example.org> [RANGE 30m TUMBLING]
FROM <file:///Users/vitor/git-repository/KAFKA/scep-operator/examples/MusicalArtists.rdf>
WHERE
{  
    {
        { // Detecta um MusicalArtist com sentimento negativo
            ?tweet1 rdf:type sioc:Post .
            ?tweet1 dc:created ?date1 .  
            ?tweet1 onyx:hasEmotionSet ?emotionSet1 .
            ?tweet1 schema:mentions ?entity1 .
            ?entity1 nee:hasMatchedURI ?artist1 .                
            ?artist1 rdf:type dbo:MusicalArtist .     
            ?artist1 dbo:genre ?genre1 .        
            ?emotionSet1 onyx:hasEmotion ?negative .
            ?negative onyx:hasEmotionCategory wna:negative-emotion .
            ?negative onyx:hasEmotionIntensity ?negNum .
            
            FILTER (!contains( str(?negNum), "0.0"))
        }
        { 
            // Detecta um MusicalArtist em um tweet com pelo menos outra entity               
            ?tweet2 rdf:type sioc:Post .
            ?tweet2 dc:created ?date2 .  
            ?tweet2 schema:mentions ?entity2 .
            ?tweet2 schema:mentions ?entityOther2 .
            ?entity2 nee:hasMatchedURI ?artist2 .                
            ?artist2 rdf:type dbo:MusicalArtist .     
            ?artist2 dbo:genre ?genre2 .        
            ?entityOther2 nee:hasMatchedURI ?otherURI2 .
            
            FILTER (?artist2 != ?otherURI2)
        }
        {
            // Detect um MusicalArtist com sentimento positivo
            ?tweet3 rdf:type sioc:Post .
            ?tweet3 dc:created ?date3 .    
            ?tweet3 onyx:hasEmotionSet ?emotionSet3 .
            ?tweet3 schema:mentions ?entity3 .
            ?entity3 nee:hasMatchedURI ?artist3 .                
            ?artist3 rdf:type dbo:MusicalArtist .     
            ?emotionSet3 onyx:hasEmotion ?positive .
            ?positive onyx:hasEmotionCategory wna:positive-emotion .
            ?positive onyx:hasEmotionIntensity ?posNum .

            FILTER (!contains( str(?posNum), "0.0"))                
        }
    }
    FILTER ( ( ?date1 < ?date2 ) && ( ?date2 < ?date3 ) )        
}